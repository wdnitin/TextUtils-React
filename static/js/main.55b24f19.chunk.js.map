{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","style","backgroundColor","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.55b24f19.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                </li>\r\n                {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n                </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n                <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                <button className=\"btn btn-outline-secondary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n// Define Prop Types:\r\nNavbar.propTypes = {title: PropTypes.string.isRequired,\r\n                    aboutText: PropTypes.string.isRequired}\r\n\r\n// Specifies the default values for props:\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n};\r\n","// React Function Based Component (shortcode: rfc)\r\nimport React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {   \r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Uppercase was clicked: \" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase\", \"success\");\r\n    }\r\n\r\n    const handleLowClick = ()=>{\r\n        // console.log(\"Uppercase was clicked: \" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to LowerCase\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{\r\n        // console.log(\"Uppercase was clicked: \" + text);\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared\", \"success\");\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to clipboard\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Spaces removed\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    // Declare a new state variable, which we'll call \"text\"\r\n    const [text, setText] = useState('');\r\n    //text = \"New Text\";    // Wrong way to change the text\r\n    //setText(\"New Text\");   // Correct way to change the text\r\n\r\n    return (\r\n        <> \r\n        <div className=\"container my-3\">\r\n            <h2>{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div> \r\n            <button className=\"btn btn-secondary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-secondary mx-1\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-secondary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-secondary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-secondary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n            <h2>Your Text Summry</h2>\r\n            <p>{text.split(\" \").length} Words and {text.length} Characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\" Enter something in the textbox above to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>        \r\n    )\r\n}\r\n\r\n","// import logo from './logo.svg';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not.\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#343a40';\n      document.body.style.color = 'white';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark Mode';\n\n      // setInterval(() => {\n      //   document.title = 'TextUtils is Amazing';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now';\n      // }, 1500);\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n    \n  }\n  return (\n    <>\n    {/* <Router>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <Switch>\n        <Route exact path=\"/about\">\n          <About />\n        </Route>\n        <Route exact path=\"/\">\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\"/>\n        </Route>\n      </Switch>\n    </Router> */}\n\n      {/* <Navbar/> */}\n      {/* <Navbar title=\"TextUtils\" aboutText=\"About Us\"/> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      {/* <About /> */}\n      <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\"/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}